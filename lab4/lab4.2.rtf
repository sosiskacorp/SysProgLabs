{\rtf1\ansi\ansicpg1251\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Task1.1\
function* randomGenerator(n, m) \{\
    while (true) \{\
        yield Math.floor(Math.random() * (m - n + 1) + n);\
    \}\
\}\
\
const generator = randomGenerator(1, 100);\
console.log(generator.next().value); // \uc0\u1042 \u1099 \u1074 \u1086 \u1076 \u1080 \u1090  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1077  \u1095 \u1080 \u1089 \u1083 \u1086  \u1086 \u1090  1 \u1076 \u1086  100\
\
Task1.2\
function pythagoreanSequence() \{\
    let a = 2, b = 1;\
    while (true) \{\
        [a, b] = [b, a + b];\
        yield a;\
    \}\
\}\
\
const pythagorean = pythagoreanSequence();\
console.log(pythagorean.next().value); // \uc0\u1042 \u1099 \u1074 \u1086 \u1076 \u1080 \u1090  \u1095 \u1080 \u1089 \u1083 \u1086  \u1080 \u1079  \u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1100 \u1085 \u1086 \u1089 \u1090 \u1080  \u1055 \u1072 \u1076 \u1086 \u1074 \u1072 \u1085 \u1072 \
\
Task1.3\
function* primeGenerator() \{\
    let current = 2;\
    while (true) \{\
        if (isPrime(current)) \{\
            yield current;\
        \}\
        current++;\
    \}\
\}\
\
function isPrime(num) \{\
    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) \{\
        if (num % i === 0) return false;\
    \}\
    return num > 1;\
\}\
\
const primes = primeGenerator();\
console.log(primes.next().value); // \uc0\u1042 \u1099 \u1074 \u1086 \u1076 \u1080 \u1090  \u1087 \u1077 \u1088 \u1074 \u1086 \u1077  \u1087 \u1088 \u1086 \u1089 \u1090 \u1086 \u1077  \u1095 \u1080 \u1089 \u1083 \u1086 \
\
Task2.1\
function countLetters(str) \{\
    const letterCounts = new Map();\
    for (const letter of str) \{\
        letterCounts.set(letter, (letterCounts.get(letter) || 0) + 1);\
    \}\
    return letterCounts;\
\}\
\
console.log(countLetters('hello world')); // Map \{ 'h' => 1, 'e' => 1, 'l' => 3, 'o' => 2, ' ' => 1, 'w' => 1, 'r' => 1, 'd' => 1 \}\
\
Task2.2\
function* primeNumbers() \{\
    let current = 2n;\
    while (true) \{\
        if (isPrimeBigInt(current)) \{\
            yield current;\
        \}\
        current++;\
    \}\
\}\
\
function isPrimeBigInt(num) \{\
    for (let i = 2n, sqrt = BigInt(Math.sqrt(Number(num))); i <= sqrt; i++) \{\
        if (num % i === 0n) return false;\
    \}\
    return num > 1n;\
\}\
\
function getPrime(n) \{\
    const primes = primeNumbers();\
    let count = 0;\
    for (let prime of primes) \{\
        if (++count === n) return prime;\
    \}\
\}\
\
console.log(getPrime(1000)); // \uc0\u1042 \u1099 \u1074 \u1086 \u1076 \u1080 \u1090  1000-\u1077  \u1087 \u1088 \u1086 \u1089 \u1090 \u1086 \u1077  \u1095 \u1080 \u1089 \u1083 \u1086 \
}