{\rtf1\ansi\ansicpg1251\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Task1.1\
function counter(n) \{\
  let intervalId = setInterval(() => \{\
    console.log(n);\
    n--;\
    if (n <  0) \{\
      clearInterval(intervalId);\
    \}\
  \},  1000);\
\}\
\
Task1.2\
function createCounter(n) \{\
  let intervalId;\
\
  function start() \{\
    if (intervalId) return; // \uc0\u1057 \u1095 \u1105 \u1090 \u1095 \u1080 \u1082  \u1091 \u1078 \u1077  \u1079 \u1072 \u1087 \u1091 \u1097 \u1077 \u1085 \
    intervalId = setInterval(() => \{\
      console.log(n);\
      n--;\
      if (n <  0) \{\
        clearInterval(intervalId);\
        intervalId = null; // \uc0\u1057 \u1073 \u1088 \u1086 \u1089  \u1089 \u1095 \u1105 \u1090 \u1095 \u1080 \u1082 \u1072  \u1087 \u1086 \u1089 \u1083 \u1077  \u1086 \u1089 \u1090 \u1072 \u1085 \u1086 \u1074 \u1082 \u1080 \
      \}\
    \},  1000);\
  \}\
\
  function pause() \{\
    clearInterval(intervalId);\
    intervalId = null;\
  \}\
\
  function stop() \{\
    clearInterval(intervalId);\
    n =  0; // \uc0\u1057 \u1073 \u1088 \u1086 \u1089  \u1089 \u1095 \u1105 \u1090 \u1095 \u1080 \u1082 \u1072 \
  \}\
\
  return \{\
    start,\
    pause,\
    stop\
  \};\
\}\
\
Task2.1\
function delay(N) \{\
  return new Promise(resolve => setTimeout(resolve, N *  1000));\
\}\
\
Task2.2\
async function countdown(n) \{\
  for (let i = n; i >=  0; i--) \{\
    console.log(i);\
    await delay(1);\
  \}\
\}\
\
countdown(5); // \uc0\u1055 \u1088 \u1080 \u1084 \u1077 \u1088  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1085 \u1080 \u1103 \
\
Task2.3\
async function getFirstRepoName(username) \{\
  try \{\
    const userResponse = await fetch(`https://api.github.com/users/$\{username\}`);\
    if (!userResponse.ok) throw new Error(userResponse.statusText);\
    const userData = await userResponse.json();\
\
    const reposResponse = await fetch(userData.repos_url);\
    if (!reposResponse.ok) throw new Error(reposResponse.statusText);\
    const reposData = await reposResponse.json();\
\
    return reposData[0].name; \
  \} catch (error) \{\
    console.error(error);\
    return null;\
  \}\
\}\
\
getFirstRepoName('octocat').then(repoName => console.log(repoName));\
\
Task3\
async function getGithubUser() \{\
  let name = prompt("\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077   \u1083 \u1086 \u1075 \u1080 \u1085 ?", "iliakan");\
\
  while (true) \{\
    try \{\
      const user = await loadJson(`https://api.github.com/users/$\{name\}`);\
      alert(`\uc0\u1055 \u1086 \u1083 \u1085 \u1086 \u1077  \u1080 \u1084 \u1103 : $\{user.name\}.`);\
      return user;\
    \} catch (err) \{\
      if (err instanceof HttpError && err.response.status ==  404) \{\
        alert("\uc0\u1058 \u1072 \u1082 \u1086 \u1075 \u1086  \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1103  \u1085 \u1077  \u1089 \u1091 \u1097 \u1077 \u1089 \u1090 \u1074 \u1091 \u1077 \u1090 , \u1087 \u1086 \u1078 \u1072 \u1083 \u1091 \u1081 \u1089 \u1090 \u1072 , \u1087 \u1086 \u1074 \u1090 \u1086 \u1088 \u1080 \u1090 \u1077  \u1074 \u1074 \u1086 \u1076 .");\
        name = prompt("\uc0\u1042 \u1074 \u1077 \u1076 \u1080 \u1090 \u1077   \u1083 \u1086 \u1075 \u1080 \u1085 ?", "iliakan");\
      \} else \{\
        throw err;\
      \}\
    \}\
  \}\
\}\
\
getGithubUser();\
\
}